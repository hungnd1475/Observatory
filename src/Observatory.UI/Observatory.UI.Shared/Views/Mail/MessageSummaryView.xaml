<UserControl x:Class="Observatory.UI.Views.Mail.MessageSummaryView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:controls="using:Observatory.UI.Controls"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:ex="using:Observatory.UI.Extensions"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:models="using:Observatory.Core.Models"
             xmlns:triggers="using:Microsoft.Toolkit.Uwp.UI.Triggers"
             xmlns:ui="using:Observatory.UI"
             xmlns:wctex="using:Microsoft.Toolkit.Uwp.UI.Extensions"
             d:DesignHeight="300"
             d:DesignWidth="400"
             x:DefaultBindMode="OneWay"
             mc:Ignorable="d">
  <UserControl.Resources>
    <ResourceDictionary>
      <ResourceDictionary.ThemeDictionaries>
        <ResourceDictionary x:Key="Default">
          <SolidColorBrush x:Key="FlaggedColor" Color="#FFFFFFCC"/>
          <SolidColorBrush x:Key="ArchiveIconColor" Color="#FF196A35"/>
          <SolidColorBrush x:Key="DeleteIconColor" Color="#FFD72831"/>
          <SolidColorBrush x:Key="FlagIconColor" Color="#FFAC2E00"/>
          <SolidColorBrush x:Key="UnflagIconColor" Color="#FFE32A34"/>
          <SolidColorBrush x:Key="HighImportanceIconColor" Color="#FFE8504F"/>
          <SolidColorBrush x:Key="UnreadColor" Color="{ThemeResource SystemAccentColorDark2}"/>
        </ResourceDictionary>
        <ResourceDictionary x:Key="Dark">
          <SolidColorBrush x:Key="FlaggedColor" Color="#FFFFFFCC"/>
          <SolidColorBrush x:Key="ArchiveIconColor" Color="#FF196A35"/>
          <SolidColorBrush x:Key="DeleteIconColor" Color="#FFD72831"/>
          <SolidColorBrush x:Key="FlagIconColor" Color="#FFAC2E00"/>
          <SolidColorBrush x:Key="UnflagIconColor" Color="#FFE32A34"/>
          <SolidColorBrush x:Key="HighImportanceIconColor" Color="#FFE8504F"/>
          <SolidColorBrush x:Key="UnreadColor" Color="{ThemeResource SystemAccentColorDark2}"/>
        </ResourceDictionary>
      </ResourceDictionary.ThemeDictionaries>

      <Style x:Key="MessageSummaryViewArchiveButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="Button">
              <ex:FluentSystemIcon x:Name="Icon"
                                   Symbol="Archive">
                <VisualStateManager.VisualStateGroups>
                  <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal"/>
                    <VisualState x:Name="PointerOver">
                      <VisualState.Setters>
                        <Setter Target="Icon.Foreground" Value="{ThemeResource ArchiveIconColor}"/>
                      </VisualState.Setters>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                      <VisualState.Setters>
                        <Setter Target="Icon.Foreground" Value="{ThemeResource ArchiveIconColor}"/>
                      </VisualState.Setters>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                      <VisualState.Setters>
                        <Setter Target="Icon.Foreground" Value="{ThemeResource SystemControlDisabledBaseMediumLowBrush}"/>
                      </VisualState.Setters>
                    </VisualState>
                  </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
              </ex:FluentSystemIcon>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>

      <Style x:Key="MessageSummaryViewDeleteButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="Button">
              <ex:FluentSystemIcon x:Name="Icon"
                                   Symbol="Delete">
                <VisualStateManager.VisualStateGroups>
                  <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal"/>
                    <VisualState x:Name="PointerOver">
                      <VisualState.Setters>
                        <Setter Target="Icon.Foreground" Value="{ThemeResource DeleteIconColor}"/>
                      </VisualState.Setters>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                      <VisualState.Setters>
                        <Setter Target="Icon.Foreground" Value="{ThemeResource DeleteIconColor}"/>
                      </VisualState.Setters>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                      <VisualState.Setters>
                        <Setter Target="Icon.Foreground" Value="{ThemeResource SystemControlDisabledBaseMediumLowBrush}"/>
                      </VisualState.Setters>
                    </VisualState>
                  </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
              </ex:FluentSystemIcon>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>

      <Style x:Key="MessageSummaryViewToggleFlagButtonStyle" TargetType="ToggleButton">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="ToggleButton">
              <Grid Background="{TemplateBinding Background}">
                <IconSourceElement x:Name="FlagIcon"
                                   Margin="-2">
                  <PathIconSource Data="{StaticResource FlagIconData}"/>
                </IconSourceElement>
                <IconSourceElement x:Name="UnflagIcon"
                                   Margin="-2"
                                   Visibility="Collapsed">
                  <PathIconSource Data="{StaticResource UnflagIconData}"/>
                </IconSourceElement>
                <VisualStateManager.VisualStateGroups>
                  <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal"/>
                    <VisualState x:Name="PointerOver">
                      <VisualState.Setters>
                        <Setter Target="FlagIcon.Foreground" Value="{ThemeResource FlagIconColor}"/>
                      </VisualState.Setters>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                      <VisualState.Setters>
                        <Setter Target="FlagIcon.Foreground" Value="{ThemeResource FlagIconColor}"/>
                      </VisualState.Setters>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                      <VisualState.Setters>
                        <Setter Target="FlagIcon.Foreground" Value="{ThemeResource SystemControlDisabledBaseMediumLowBrush}"/>
                      </VisualState.Setters>
                    </VisualState>
                    <VisualState x:Name="Checked">
                      <VisualState.Setters>
                        <Setter Target="FlagIcon.Visibility" Value="Collapsed"/>
                        <Setter Target="UnflagIcon.Visibility" Value="Visible"/>
                        <!--<Setter Target="FlagIcon.Symbol" Value="FlagOff"/>-->
                        <!--<Setter Target="FlagIcon.Foreground" Value="{ThemeResource UnflagIconColor}"/>-->
                        <Setter Target="UnflagIcon.Foreground" Value="{ThemeResource UnflagIconColor}"/>
                      </VisualState.Setters>
                    </VisualState>
                    <VisualState x:Name="CheckedPointerOver">
                      <VisualState.Setters>
                        <Setter Target="FlagIcon.Visibility" Value="Collapsed"/>
                        <Setter Target="UnflagIcon.Visibility" Value="Visible"/>
                        <!--<Setter Target="FlagIcon.Symbol" Value="FlagOff"/>-->
                        <!--<Setter Target="FlagIcon.Foreground" Value="{ThemeResource UnflagIconColor}"/>-->
                        <Setter Target="UnflagIcon.Foreground" Value="{ThemeResource UnflagIconColor}"/>
                      </VisualState.Setters>
                    </VisualState>
                    <VisualState x:Name="CheckedPressed">
                      <VisualState.Setters>
                        <Setter Target="FlagIcon.Visibility" Value="Collapsed"/>
                        <Setter Target="UnflagIcon.Visibility" Value="Visible"/>
                        <!--<Setter Target="FlagIcon.Symbol" Value="FlagOff"/>-->
                        <!--<Setter Target="FlagIcon.Foreground" Value="{ThemeResource UnflagIconColor}"/>-->
                        <Setter Target="UnflagIcon.Foreground" Value="{ThemeResource UnflagIconColor}"/>
                      </VisualState.Setters>
                    </VisualState>
                    <VisualState x:Name="CheckedDisabled">
                      <VisualState.Setters>
                        <Setter Target="FlagIcon.Visibility" Value="Collapsed"/>
                        <Setter Target="UnflagIcon.Visibility" Value="Visible"/>
                        <!--<Setter Target="FlagIcon.Symbol" Value="FlagOff"/>-->
                        <!--<Setter Target="FlagIcon.Foreground" Value="{ThemeResource SystemControlDisabledBaseMediumLowBrush}"/>-->
                        <Setter Target="UnflagIcon.Foreground" Value="{ThemeResource SystemControlDisabledBaseMediumLowBrush}"/>
                      </VisualState.Setters>
                    </VisualState>
                  </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
              </Grid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
    </ResourceDictionary>
  </UserControl.Resources>
  <UserControl.ContextFlyout>
    <MenuFlyout>
      <MenuFlyoutItem Command="{x:Bind ViewModel.Archive}"
                      Icon="{ex:FluentSystemIcon Symbol=Archive}"
                      Text="Archive"/>
      <MenuFlyoutItem Command="{x:Bind ViewModel.Delete}"
                      Icon="{ex:FluentSystemIcon Symbol=Delete}"
                      Text="Delete"/>
      <MenuFlyoutItem Command="{x:Bind ViewModel.Move}"
                      Icon="{ex:FluentSystemIcon Symbol=FolderArrowRight}"
                      Text="Move"/>
      <MenuFlyoutItem Command="{x:Bind ViewModel.ToggleFlag}"
                      Text="Set flag"
                      Visibility="{x:Bind ui:Converters.BoolNegationToVisibility(ViewModel.IsFlagged)}">
        <MenuFlyoutItem.Icon>
          <IconSourceElement Margin="-1">
            <PathIconSource Data="{StaticResource FlagIconData}"/>
          </IconSourceElement>
        </MenuFlyoutItem.Icon>
      </MenuFlyoutItem>
      <MenuFlyoutItem Command="{x:Bind ViewModel.ToggleFlag}"
                      Text="Clear flag"
                      Visibility="{x:Bind ViewModel.IsFlagged}">
        <MenuFlyoutItem.Icon>
          <IconSourceElement Margin="-1">
            <PathIconSource Data="{StaticResource UnflagIconData}"/>
          </IconSourceElement>
        </MenuFlyoutItem.Icon>
      </MenuFlyoutItem>
      <MenuFlyoutItem Command="{x:Bind ViewModel.ToggleRead}"
                      Icon="{ex:FluentSystemIcon Symbol=MailRead}"
                      Text="Mark as read"
                      Visibility="{x:Bind ui:Converters.BoolNegationToVisibility(ViewModel.IsRead)}"/>
      <MenuFlyoutItem Command="{x:Bind ViewModel.ToggleRead}"
                      Icon="{ex:FluentSystemIcon Symbol=Mail}"
                      Text="Mark as unread"
                      Visibility="{x:Bind ViewModel.IsRead}"/>
      <MenuFlyoutSeparator/>
      <MenuFlyoutItem Command="{x:Bind ViewModel.MoveToJunk}"
                      Icon="{ex:FluentSystemIcon Symbol=FolderArrowRight}"
                      Text="Move to Junk"/>
    </MenuFlyout>
  </UserControl.ContextFlyout>
  <Grid x:Name="ContentRootGrid"
        Background="Transparent"
        Opacity="0">
    <Grid.RowDefinitions>
      <RowDefinition Height="*"/>
      <RowDefinition Height="Auto"/>
    </Grid.RowDefinitions>
    <Rectangle x:Name="ContextOpenIndicator"
               Grid.RowSpan="2"
               HorizontalAlignment="Stretch"
               VerticalAlignment="Stretch"
               Stroke="{StaticResource UnreadColor}"
               StrokeThickness="1"
               Visibility="Collapsed"/>
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition Width="*"/>
      </Grid.ColumnDefinitions>
      <Border Width="4"
              Margin="0,0,8,0">
        <Rectangle VerticalAlignment="Stretch"
                   Fill="{ThemeResource UnreadColor}"
                   Visibility="{x:Bind ui:Converters.BoolNegationToVisibility(ViewModel.IsRead)}"/>
      </Border>
      <Border x:Name="MultiSelectionBox"
              Grid.Column="1"
              Width="18"
              Height="18"
              Margin="0,12"
              VerticalAlignment="Top"
              Background="Transparent"
              BorderBrush="{ThemeResource SystemControlForegroundBaseMediumHighBrush}"
              BorderThickness="2"
              RenderTransformOrigin="0,0"
              Visibility="Collapsed">
        <Border.RenderTransform>
          <CompositeTransform x:Name="MultiSelectionBoxTransform"/>
        </Border.RenderTransform>
        <ex:FluentSystemIcon x:Name="MultiSelectionBoxCheckMark"
                             Grid.Column="1"
                             HorizontalAlignment="Center"
                             VerticalAlignment="Center"
                             FontSize="14"
                             Symbol="CheckMark"
                             Visibility="Collapsed"/>
      </Border>
      <Grid x:Name="ContentGrid"
            Grid.Column="2"
            Margin="8,8,16,8">
        <Grid.RenderTransform>
          <TranslateTransform x:Name="ContentGridTranslateTransform"/>
        </Grid.RenderTransform>
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto"/>
          <RowDefinition Height="Auto"/>
          <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="*"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <TextBlock x:Name="CorrespondentsText"
                   FontSize="16"
                   Text="{x:Bind ViewModel.Correspondents}"/>
        <StackPanel Grid.Column="1"
                    HorizontalAlignment="Right"
                    d:Visibility="Collapsed"
                    Orientation="Horizontal"
                    Visibility="{x:Bind ui:Converters.BoolNegationToVisibility(IsPointerOver)}">
          <ex:FluentSystemIcon Symbol="Attachment"
                               Visibility="{x:Bind ViewModel.HasAttachments}"/>
          <ex:FluentSystemIcon x:Name="ImportanceIcon"
                               Margin="0,0,-5,0"
                               Visibility="Collapsed"/>
          <IconSourceElement x:Name="FlagIcon"
                             Margin="5,-2,-2,-2"
                             VerticalAlignment="Center"
                             Foreground="{ThemeResource UnflagIconColor}"
                             Visibility="{x:Bind ViewModel.IsFlagged}">
            <PathIconSource Data="{StaticResource FlagIconData}"/>
          </IconSourceElement>
        </StackPanel>
        <StackPanel Grid.Column="1"
                    HorizontalAlignment="Right"
                    d:Visibility="Visible"
                    Orientation="Horizontal"
                    Spacing="5"
                    Visibility="{x:Bind IsPointerOver}">
          <Button Command="{x:Bind ViewModel.Archive}"
                  Style="{StaticResource MessageSummaryViewArchiveButtonStyle}"
                  ToolTipService.ToolTip="Archive this item"/>
          <Button Command="{x:Bind ViewModel.Delete}"
                  Style="{StaticResource MessageSummaryViewDeleteButtonStyle}"
                  ToolTipService.ToolTip="Delete this item"/>
          <controls:OneWayToggleButton x:Name="ToggleFlagButton"
                                       Command="{x:Bind ViewModel.ToggleFlag}"
                                       IsChecked="{x:Bind ViewModel.IsFlagged}"
                                       Style="{StaticResource MessageSummaryViewToggleFlagButtonStyle}"
                                       ToolTipService.ToolTip="Set flag on this item"/>
        </StackPanel>
        <TextBlock x:Name="SubjectText"
                   Grid.Row="1"
                   Text="{x:Bind ViewModel.Subject}"/>
        <TextBlock Grid.Row="1"
                   Grid.Column="1"
                   Margin="8,0,0,0"
                   FontSize="12"
                   Foreground="{ThemeResource SystemColorGrayTextBrush}"
                   Text="{x:Bind ViewModel.FormattedReceivedDateTime}"
                   TextAlignment="Right"/>
        <TextBlock Grid.Row="2"
                   Foreground="{ThemeResource SystemColorGrayTextBrush}"
                   Text="{x:Bind ViewModel.Preview}"/>
      </Grid>
    </Grid>
    <Rectangle Grid.Row="1"
               Height="1"
               HorizontalAlignment="Stretch"
               Fill="{ThemeResource SystemBaseLowColor}"/>
    <VisualStateManager.VisualStateGroups>
      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:IsEqualStateTrigger Value="{x:Bind StateName}"
                                          To="Normal"/>
          </VisualState.StateTriggers>
        </VisualState>

        <VisualState>
          <VisualState.StateTriggers>
            <triggers:IsEqualStateTrigger Value="{x:Bind StateName}"
                                          To="PointerOver"/>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ContentRootGrid.Background" Value="{ThemeResource SystemControlHighlightListLowBrush}"/>
          </VisualState.Setters>
        </VisualState>

        <VisualState>
          <VisualState.StateTriggers>
            <triggers:IsEqualStateTrigger Value="{x:Bind StateName}"
                                          To="Selected"/>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ContentRootGrid.Background" Value="{ThemeResource SystemControlHighlightListAccentLowBrush}"/>
          </VisualState.Setters>
        </VisualState>

        <VisualState>
          <VisualState.StateTriggers>
            <triggers:IsEqualStateTrigger Value="{x:Bind StateName}"
                                          To="Flagged"/>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ContentRootGrid.Background" Value="{ThemeResource FlaggedColor}"/>
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:IsEqualStateTrigger Value="{x:Bind ViewModel.IsFlagged}"
                                          To="True"/>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ToggleFlagButton.(ToolTipService.ToolTip)" Value="Clear flag on this item"/>
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:IsEqualStateTrigger Value="{x:Bind ViewModel.IsRead}"
                                          To="False"/>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="SubjectText.FontWeight" Value="SemiBold"/>
            <Setter Target="CorrespondentsText.FontWeight" Value="SemiBold"/>
            <Setter Target="SubjectText.Foreground" Value="{ThemeResource UnreadColor}"/>
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <VisualStateGroup>
        <VisualState x:Name="Low">
          <VisualState.StateTriggers>
            <triggers:IsEqualStateTrigger Value="{x:Bind ViewModel.Importance}">
              <triggers:IsEqualStateTrigger.To>
                <models:Importance>Low</models:Importance>
              </triggers:IsEqualStateTrigger.To>
            </triggers:IsEqualStateTrigger>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ImportanceIcon.Symbol" Value="ArrowDown"/>
            <Setter Target="ImportanceIcon.Visibility" Value="Visible"/>
          </VisualState.Setters>
        </VisualState>

        <VisualState x:Name="High">
          <VisualState.StateTriggers>
            <triggers:IsEqualStateTrigger Value="{x:Bind ViewModel.Importance}">
              <triggers:IsEqualStateTrigger.To>
                <models:Importance>High</models:Importance>
              </triggers:IsEqualStateTrigger.To>
            </triggers:IsEqualStateTrigger>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ImportanceIcon.Symbol" Value="Importance"/>
            <Setter Target="ImportanceIcon.Foreground" Value="{ThemeResource HighImportanceIconColor}"/>
            <Setter Target="ImportanceIcon.Visibility" Value="Visible"/>
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:IsNotEqualStateTrigger Value="{x:Bind ViewModel}"
                                             To="{x:Null}"/>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ContentRootGrid.Opacity" Value="1"/>
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{x:Bind IsContextMenuOpen}"/>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="ContextOpenIndicator.Visibility" Value="Visible"/>
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{x:Bind IsMultiSelectionEnabled}"/>
          </VisualState.StateTriggers>
          <Storyboard>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectionBoxTransform"
                                           Storyboard.TargetProperty="TranslateX">
              <EasingDoubleKeyFrame KeyTime="0:0:0"
                                    Value="-20"/>
              <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1"
                                    KeyTime="0:0:0.333"
                                    Value="0"/>
            </DoubleAnimationUsingKeyFrames>
            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectionBox"
                                           Storyboard.TargetProperty="Visibility">
              <DiscreteObjectKeyFrame KeyTime="0"
                                      Value="Visible"/>
            </ObjectAnimationUsingKeyFrames>
          </Storyboard>
        </VisualState>
      </VisualStateGroup>

      <VisualStateGroup>
        <VisualState>
          <VisualState.StateTriggers>
            <StateTrigger IsActive="{x:Bind IsSelected}"/>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="MultiSelectionBoxCheckMark.Visibility" Value="Visible"/>
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
    </VisualStateManager.VisualStateGroups>
  </Grid>
</UserControl>
